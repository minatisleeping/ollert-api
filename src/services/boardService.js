/* eslint-disable no-useless-catch */
import { slugify } from '~/utils/formatters'
import { boardModel } from '~/models/boardModel'
import { StatusCodes } from 'http-status-codes'
import ApiError from '~/utils/ApiError'
import { cloneDeep } from 'lodash'

const createNew = async (reqBody) => {
  try {
    const newBoard = {
      ...reqBody,
      slug: slugify(reqBody.title)
    }

    //* G·ªçi t·ªõi t·∫ßng Model ƒë·ªÉ x·ª≠ l√Ω l∆∞u b·∫£n ghi newBoard v√†o db
    const createdBoard = await boardModel.createNew(newBoard)
    // console.log('üöÄ ~ createNew ~ createdBoard:', createdBoard)

    //* Th∆∞·ªùng th√¨ create(add) xong th√¨ show ra lu√¥n cho user xem(vary on each project)
    const getNewBoard = await boardModel.findOneById(createdBoard.insertedId)
    // console.log('üöÄ ~ createNew ~ getNewBoard:', getNewBoard)

    //* Tr·∫£ k·∫øt qu·∫£ v·ªÅ, trong Service lu√¥n ph·∫£i c√≥ return
    return getNewBoard
  } catch (error) { throw error }
}

const getDetails = async (boardId) => {
  try {
    const board = await boardModel.getDetails(boardId)

    if (!board) throw new ApiError(StatusCodes.NOT_FOUND, 'Board not found!')

    //* B1: cloneDeep: clone api getBoard ra 1 c√°i m·ªõi ƒë·ªÉ x·ª≠ l√≠, k modify board ban ƒë·∫ßu
    const resBoard = cloneDeep(board)

    //* B2: ƒê∆∞a Card v·ªÅ ƒë√∫ng Column c·ªßa n√≥
    resBoard.columns.forEach(column => {
      //? C√°ch d√πng equals() c·ªßa mongodb support ƒë·ªÉ so s√°nh 2 ObjectId
      column.cards = resBoard.cards.filter(card => card.columnId.equals(column._id))

      //? C√°ch d√πng toString() l√† ƒë·ªÉ convert ObjectId sang String ƒë·ªÉ so s√°nh, h√†m n√†y c·ªßa JS
      // column.cards = resBoard.cards.filter(card => card.columnId.toString() === column._id.toString()) //! filter() return new array -> kh√° l√† hay
    })

    //* B3: Xo√° m·∫£ng Cards kh·ªèi Board ban ƒë·∫ßu
    delete resBoard.cards // API c·ªßa m√¨nh k c·∫ßn cards n·ªØa, n√≥i chung c·ª© nh√¨n res l√† bi·∫øt ph·∫£i th√™m or xo√° c√°i n√†o

    return resBoard
  } catch (error) { throw error }
}

export const boardService = {
  createNew,
  getDetails
}
